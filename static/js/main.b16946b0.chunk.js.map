{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["endsWithOperator","isAnOperator","Formula","id","this","props","formula","React","Component","Display","value","type","name","maxLength","readOnly","Special","className","onClick","clear","inverse","percent","Numbers","number","decimal","Operators","operator","Calculator","state","currentValue","lastInput","handleNumber","bind","handleDecimal","handleOperator","handleEvaluation","handleClear","handleInverse","handlePercent","e","inputValue","target","newValue","test","substring","setState","preventDefault","newFormula","length","string","replace","eval","toString","percentage","equals","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b16946b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.scss\";\r\n\r\nconst endsWithOperator = /[+\\-×÷]$/;\r\nconst isAnOperator = /[+\\-×÷]/;\r\n\r\nclass Formula extends React.Component {\r\n  render() {\r\n    return <p id=\"formula\">{this.props.formula}</p>;\r\n  }\r\n}\r\n\r\nclass Display extends React.Component {\r\n  render() {\r\n    return (\r\n      <input\r\n        value={this.props.value}\r\n        type=\"text\"\r\n        name=\"display\"\r\n        id=\"display\"\r\n        maxLength=\"16\"\r\n        readOnly={true}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass Special extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"special\" className=\"input-group\">\r\n        <input\r\n          type=\"button\"\r\n          value=\"C\"\r\n          name=\"clear\"\r\n          id=\"clear\"\r\n          className=\"key\"\r\n          onClick={this.props.clear}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"+/-\"\r\n          name=\"inverse\"\r\n          id=\"inverse\"\r\n          className=\"key\"\r\n          onClick={this.props.inverse}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"%\"\r\n          name=\"percent\"\r\n          id=\"percent\"\r\n          className=\"key\"\r\n          onClick={this.props.percent}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Numbers extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"numbers\" className=\"input-group\">\r\n        <input\r\n          type=\"button\"\r\n          value=\"7\"\r\n          name=\"seven\"\r\n          id=\"seven\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"8\"\r\n          name=\"eight\"\r\n          id=\"eight\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"9\"\r\n          name=\"nine\"\r\n          id=\"nine\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n\r\n        <input\r\n          type=\"button\"\r\n          value=\"4\"\r\n          name=\"four\"\r\n          id=\"four\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"5\"\r\n          name=\"five\"\r\n          id=\"five\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"6\"\r\n          name=\"six\"\r\n          id=\"six\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n\r\n        <input\r\n          type=\"button\"\r\n          value=\"1\"\r\n          name=\"one\"\r\n          id=\"one\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"2\"\r\n          name=\"two\"\r\n          id=\"two\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"3\"\r\n          name=\"three\"\r\n          id=\"three\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n\r\n        <input\r\n          type=\"button\"\r\n          value=\"0\"\r\n          name=\"zero\"\r\n          id=\"zero\"\r\n          className=\"key\"\r\n          onClick={this.props.number}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\".\"\r\n          name=\"decimal\"\r\n          id=\"decimal\"\r\n          className=\"key\"\r\n          onClick={this.props.decimal}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass Operators extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"operators\" className=\"input-group\">\r\n        <input\r\n          type=\"button\"\r\n          value=\"÷\"\r\n          name=\"divide\"\r\n          id=\"divide\"\r\n          className=\"key\"\r\n          onClick={this.props.operator}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"×\"\r\n          name=\"multiply\"\r\n          id=\"multiply\"\r\n          className=\"key\"\r\n          onClick={this.props.operator}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"-\"\r\n          name=\"substract\"\r\n          id=\"substract\"\r\n          className=\"key\"\r\n          onClick={this.props.operator}\r\n        ></input>\r\n        <input\r\n          type=\"button\"\r\n          value=\"+\"\r\n          name=\"add\"\r\n          id=\"add\"\r\n          className=\"key\"\r\n          onClick={this.props.operator}\r\n        ></input>\r\n        <input\r\n          type=\"submit\"\r\n          value=\"=\"\r\n          id=\"equals\"\r\n          className=\"key\"\r\n          onClick={this.props.operator}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentValue: \"0\",\r\n      formula: \"\",\r\n      lastInput: \"0\"\r\n    };\r\n    this.handleNumber = this.handleNumber.bind(this);\r\n    this.handleDecimal = this.handleDecimal.bind(this);\r\n    this.handleOperator = this.handleOperator.bind(this);\r\n    this.handleEvaluation = this.handleEvaluation.bind(this);\r\n    this.handleClear = this.handleClear.bind(this);\r\n    this.handleInverse = this.handleInverse.bind(this);\r\n    this.handlePercent = this.handlePercent.bind(this);\r\n  }\r\n\r\n  handleNumber(e) {\r\n    const { currentValue, formula, lastInput } = this.state;\r\n    const inputValue = e.target.value;\r\n    let newValue = \"\";\r\n\r\n    if (endsWithOperator.test(formula) && !/[0-9]|\\./.test(lastInput)) {\r\n      // after an operator was pressed, replace old (current) value\r\n      // with new one\r\n      newValue = inputValue;\r\n    } else {\r\n      if (currentValue === \"0\" || lastInput === \"=\") {\r\n        if (inputValue === \"0\") {\r\n          newValue = \"0\";\r\n        } else {\r\n          newValue = inputValue;\r\n        }\r\n      } else {\r\n        newValue = currentValue + inputValue;\r\n      }\r\n    }\r\n\r\n    newValue = newValue.substring(0, 16);\r\n\r\n    this.setState({\r\n      currentValue: newValue,\r\n      lastInput: inputValue\r\n    });\r\n  }\r\n\r\n  handleDecimal(e) {\r\n    const currentValue = this.state.currentValue;\r\n    const inputValue = e.target.value;\r\n\r\n    // only add decimal if no period is found\r\n    if (!/\\./.test(currentValue)) {\r\n      this.setState({\r\n        currentValue: (currentValue + inputValue).substring(0, 16),\r\n        lastInput: inputValue\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOperator(e) {\r\n    e.preventDefault();\r\n\r\n    const { currentValue, formula, lastInput } = this.state;\r\n    const inputValue = e.target.value;\r\n    let newValue = currentValue.substring(0, 16);\r\n    let newFormula = \"\";\r\n\r\n    // if an operator is pressed and there is no value\r\n    // after the period, remove that unnecessary period\r\n    if (/\\.$/.test(currentValue)) {\r\n      newValue = currentValue.substring(0, currentValue.length - 1);\r\n    }\r\n\r\n    if (isAnOperator.test(lastInput)) {\r\n      // if two operators were pressed in a row,\r\n      // replace previous operator with the new\r\n      newFormula = formula.substring(0, formula.length - 1) + inputValue;\r\n    } else if (lastInput === \"%\") {\r\n      newFormula = formula;\r\n    } else {\r\n      if (endsWithOperator.test(formula)) {\r\n        newFormula = formula + newValue + inputValue;\r\n      } else {\r\n        newFormula = newValue + inputValue;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      currentValue: this.handleEvaluation(newFormula).substring(0, 16),\r\n      formula: newFormula,\r\n      lastInput: inputValue\r\n    });\r\n  }\r\n\r\n  handleEvaluation(string) {\r\n    let formula = string;\r\n\r\n    // remove last operator (you cannot eval otheriwse)\r\n    // and replace multiply and divide signs\r\n    formula = formula\r\n      .substring(0, formula.length - 1)\r\n      .replace(\"×\", \"*\")\r\n      .replace(\"÷\", \"/\");\r\n\r\n    return formula === \"0\" ? \"0\" : eval(formula).toString();\r\n  }\r\n\r\n  handleClear(e) {\r\n    this.setState({\r\n      currentValue: \"0\",\r\n      formula: \"\",\r\n      lastInput: \"0\"\r\n    });\r\n  }\r\n\r\n  handleInverse() {\r\n    const currentValue = this.state.currentValue;\r\n\r\n    this.setState({ currentValue: eval(-currentValue).toString() });\r\n  }\r\n\r\n  handlePercent() {\r\n    const { currentValue, formula } = this.state;\r\n\r\n    // if formula is empty, percentage is 0\r\n    let percentage =\r\n      formula === \"\" || formula === \"0\"\r\n        ? \"0\"\r\n        : (this.handleEvaluation(formula) / 100) * currentValue;\r\n    percentage = percentage;\r\n\r\n    // currentValue and formula should be zero when trying\r\n    // to calculate a percentage of zero\r\n    this.setState({\r\n      currentValue:\r\n        currentValue === \"0\" ? \"0\" : percentage.toString().substring(0, 16),\r\n      formula: currentValue === \"0\" ? formula : formula + percentage,\r\n      lastInput: \"%\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form id=\"calculator\">\r\n        <Formula formula={this.state.formula} />\r\n        <Display value={this.state.currentValue} />\r\n        <div id=\"inputs\">\r\n          <Special\r\n            clear={this.handleClear}\r\n            inverse={this.handleInverse}\r\n            percent={this.handlePercent}\r\n          />\r\n          <Numbers number={this.handleNumber} decimal={this.handleDecimal} />\r\n          <Operators\r\n            operator={this.handleOperator}\r\n            equals={this.handleEvaluation}\r\n          />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div id=\"page-wrapper\">\r\n      <Calculator />\r\n      <footer id=\"author\">\r\n        <p>\r\n          by <a href=\"https://edkerforne.github.io/\">Edwin Kerforne</a>\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}